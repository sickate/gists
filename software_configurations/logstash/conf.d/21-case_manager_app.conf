filter {
	if [type] == "case_manager_app" {
		grok {
			patterns_dir => ["/etc/logstash/patterns"]
			match => { 
				"message" => [
					"%{CM_REQUEST}",
					"%{CM_HASH_LOG}",
					"%{STORE_RE}",
					"%{RULE_RESULT}",
					"%{SEARCH_BLK}",
					"%{CM_REQUEST_NEW}",
					"%{CM_HASH_LOG_NEW}",
					"%{STORE_RE_NEW}",
					"%{APP_RULE}",
					"%{SEARCH_BLK_NEW}",
					"%{HTTP_LOG}"
				]
			}
			add_field => {
				"received_at" => "%{@timestamp}"
				"occured_at" => "%{timestamp}"
			}
		}

		date {
			match => [ "timestamp", "yyyy-MM-dd HH:mm:ss Z", "ISO8601" ]
		}

    mutate {
      gsub => [
        "hitted_rule_type", "[ \"]",  "",
        "hitted_rules", "[ \"]",  ""
      ]

      split => { 
        "hitted_rule_type" => ","
        "hitted_rules" => ","
        }
    }

		# too much trouble
		if ("" in [http_session_id]) {
			mutate {
				add_field => {
					"session_id" => "%{http_session_id}"
				}
				remove_field => ["http_session_id"]
				replace => {
					"log_action_type" => "http_log"
				}
			}
		}

		if [log_action_type] == "Hash Digest" {
			mutate {
				replace => {
					"type" => "hash_digest"
				}
			}
		} else {
			geoip {
				source => "clientip"
				target => "geoip"
				database => "/etc/logstash/GeoLiteCity.dat"
				add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
				add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
			}
			mutate {
				convert => [ "[geoip][coordinates]", "float"]
			}
		}
	}
}
